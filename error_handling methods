// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Certification {
    struct Certificate {
        string stuID;           // student ID
        string stuName;        // student name
        string courseName;    // course name for certificate to be generated
        string authName;      //Name of autthority issueing certificate
        string hashID;        // unique identity to store certificate's data
    }

    mapping(string => Certificate) public certificates;
    

    function generateCertificate(
        string memory certificate_id,
        string memory stu_ID,
        string memory stu_Name,
        string memory course_Name,
        string memory auth_Name,
        string memory hash_ID
    ) public {
        // Check if certificate with the given ID already exists
        require(bytes(certificates[certificate_id].hashID).length == 0,
            "Certificate with this ID already exists"
        );

        // Creating the certificate
        Certificate memory cert = Certificate({
            stuID: stu_ID,
            stuName: stu_Name,
            courseName: course_Name,
            authName: auth_Name,
            hashID: hash_ID
        });

        // Storing the certificate in the mapping
        certificates[certificate_id] = cert;

    }

    function getCertificate(string memory certificate_id) public view returns (
        string memory stu_ID,
        string memory stu_Name,
        string memory course_Name,
        string memory auth_Name,
        string memory hash_ID
    ) {
        Certificate memory cert = certificates[certificate_id];

        // Checking if the certificate with the given ID exists
        if (bytes(certificates[certificate_id].hashID).length == 0) {
            revert("Certificate with this ID does not exist");
        }

        // Return the values from the certificate
        return (
            cert.stuID,
            cert.stuName,
            cert.courseName,
            cert.authName,
            cert.hashID
        );
    }

    function isVerified(
        string memory _certificate_id
    ) public view returns (bool) {
        Certificate storage cert = certificates[_certificate_id];
        // Use assert to ensure the certificate's hash is not empty
        assert(bytes(cert.hashID).length != 0);
        return true;
    }

}
